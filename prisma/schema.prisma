// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  icon      String
  posts         Post[]
  comments      Comment[]
  favorites     Favorites[]
  notifications Notification[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id          Int          @id @default(autoincrement())
  title       String
  content     String
  slug        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  authorId    Int
  author      User          @relation(fields: [authorId], references: [id])
  comments    Comment[]
  favorites   Favorites[]
  tags        PostTag[]
  media       Media[]
  views       PostView[]
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  postId      Int
  post        Post     @relation(fields: [postId], references: [id])
  authorId    Int
  author      User     @relation(fields: [authorId], references: [id])
}

model PostView {
  id          Int      @id @default(autoincrement())
  postId      Int
  post        Post     @relation(fields: [postId], references: [id])
  userId      Int
  user        User    @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Media {
  id          Int      @id @default(autoincrement())
  url         String
  type        String
  postId      Int
  post        Post     @relation(fields: [postId], references: [id])
  createdAt   DateTime @default(now())
}

model Tag {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  posts       PostTag[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PostTag {
  postId      Int
  post        Post      @relation(fields: [postId], references: [id])
  tagId       Int
  tag         Tag       @relation(fields: [tagId], references: [id])
  createdAt   DateTime  @default(now())
  @@id([postId, tagId])
}

model Favorites {
  id          Int      @id @default(autoincrement())
  postId      Int
  post        Post     @relation(fields: [postId], references: [id])
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  @@unique([postId, userId])
}